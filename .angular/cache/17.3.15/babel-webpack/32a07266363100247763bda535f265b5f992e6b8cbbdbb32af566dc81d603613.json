{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let TasksService = /*#__PURE__*/(() => {\n  class TasksService {\n    constructor() {\n      this.tasks = [{\n        id: 1,\n        title: 'Annual Inspection Upload 2025',\n        date: '2025-04-07',\n        status: 'pending',\n        expanded: false,\n        releasedToFM: false,\n        subtasks: [{\n          title: 'Upload Annual Inspection Form (MBA Form)',\n          updated: new Date().toLocaleString('en-US', {\n            month: '2-digit',\n            day: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true\n          }),\n          showUploadModal: false,\n          status: 'pending'\n        }, {\n          title: 'Upload Rent Roll',\n          updated: new Date().toLocaleString('en-US', {\n            month: '2-digit',\n            day: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true\n          }),\n          showUploadModal: false,\n          status: 'pending'\n        }, {\n          title: 'Update Open Items (in Open Items tab)',\n          updated: new Date().toLocaleString('en-US', {\n            month: '2-digit',\n            day: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true\n          }),\n          status: 'pending'\n        }]\n      }, {\n        id: 3,\n        title: 'Initial Property Assessment',\n        date: '2022-10-02',\n        status: 'completed'\n      }, {\n        id: 4,\n        title: 'Annual Property Review',\n        date: '2023-10-07',\n        status: 'completed'\n      }];\n    }\n    getTasks() {\n      return of(this.tasks).pipe(map(tasks => {\n        const currentDate = new Date();\n        currentDate.setHours(0, 0, 0, 0);\n        return tasks.map(task => {\n          const postedDate = new Date(task.date);\n          postedDate.setHours(0, 0, 0, 0);\n          // If task is pending, check the posted date\n          if (task.status === 'pending') {\n            // If posted date is in the future, mark as completed (hidden from pending)\n            if (postedDate > currentDate) {\n              return {\n                ...task,\n                status: 'completed'\n              };\n            }\n            // If posted date is today or in the past, keep as pending\n            return task;\n          }\n          return task;\n        });\n      }), delay(500) // Simulate API delay\n      );\n    }\n    updateTaskDate(taskId, newDate) {\n      const task = this.tasks.find(t => t.id === taskId);\n      if (task) {\n        task.date = newDate;\n        // Update all subtask dates\n        if (task.subtasks) {\n          const formattedDate = new Date(newDate).toLocaleString('en-US', {\n            month: '2-digit',\n            day: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true\n          });\n          task.subtasks.forEach(subtask => {\n            subtask.updated = formattedDate;\n          });\n        }\n      }\n      return of(task).pipe(delay(500));\n    }\n    updateFileUpload(taskId, subtaskTitle, file) {\n      const task = this.tasks.find(t => t.id === taskId);\n      if (task && task.subtasks) {\n        const subtask = task.subtasks.find(s => s.title === subtaskTitle);\n        if (subtask) {\n          subtask.selectedFile = {\n            ...file,\n            uploadDate: new Date().toISOString()\n          };\n          subtask.updated = new Date().toLocaleString('en-US', {\n            month: '2-digit',\n            day: '2-digit',\n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit',\n            hour12: true\n          });\n        }\n      }\n      return of(task).pipe(delay(500));\n    }\n    releaseToFM(taskId) {\n      const task = this.tasks.find(t => t.id === taskId);\n      if (task) {\n        task.releasedToFM = true;\n        if (task.subtasks) {\n          task.subtasks.forEach(subtask => {\n            subtask.status = 'completed';\n          });\n        }\n        task.status = 'completed';\n      }\n      return of(task).pipe(delay(500));\n    }\n    addTask(task) {\n      this.tasks = [...this.tasks, task];\n      return of(task);\n    }\n    updateTask(task) {\n      this.tasks = this.tasks.map(t => t.id === task.id ? task : t);\n      return of(task);\n    }\n    deleteTask(id) {\n      this.tasks = this.tasks.filter(t => t.id !== id);\n      return of(true);\n    }\n    static {\n      this.ɵfac = function TasksService_Factory(t) {\n        return new (t || TasksService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: TasksService,\n        factory: TasksService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return TasksService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}